/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * Global Trust Authority is licensed under the Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *     http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
 * PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use sea_orm::FromQueryResult;
use serde::Serialize;
use serde_json::Value;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Default)]
#[sea_orm(table_name = "t_cert_info")]
pub struct Model {
    #[sea_orm(column_name = "id", primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "serial_num")]
    pub serial_num: Option<String>,
    #[sea_orm(column_name = "user_id")]
    pub user_id: Option<String>,
    #[sea_orm(column_type = "Json")]
    #[sea_orm(column_name = "type")]
    pub cert_type: Option<Value>,
    #[sea_orm(column_name = "name", unique)]
    pub name: Option<String>,
    #[sea_orm(column_name = "issuer")]
    pub issuer: Option<String>,
    #[sea_orm(column_name = "owner")]
    pub owner: Option<String>,
    #[sea_orm(column_name = "cert_info")]
    pub cert_info: Option<Vec<u8>>,
    #[sea_orm(column_name = "is_default")]
    pub is_default: Option<bool>,
    #[sea_orm(column_name = "description")]
    pub description: Option<String>,
    #[sea_orm(column_name = "version")]
    pub version: Option<i32>,
    #[sea_orm(column_name = "create_time")]
    pub create_time: Option<i64>,
    #[sea_orm(column_name = "update_time")]
    pub update_time: Option<i64>,
    #[sea_orm(column_name = "signature")]
    pub signature: Option<Vec<u8>>,
    #[sea_orm(column_name = "key_version")]
    pub key_version: Option<String>,
    #[sea_orm(column_name = "key_id")]
    pub key_id: Option<String>,
    #[sea_orm(column_name = "valid_code")]
    pub valid_code: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::cert_revoked_list::Entity")]
    CertRevokedList,
}

impl Related<super::cert_revoked_list::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CertRevokedList.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}

#[derive(FromQueryResult)]
pub struct SimpleInfo {
    pub id: String,
    pub name: Option<String>,
    pub version: Option<i32>,
}
